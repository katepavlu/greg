searchState.loadedDescShard("greg", 0, "Block annotation types\nstatic variable memory addresses start here\nabstract data block representation\nInstructions\nAbstract instruction representation\nCompiled binary\nAbstract representation of the whole program\ninstruction memory addresses start here\nToken types\nmain function of the library - takes in a program listing, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhandles printing out files\nhandles linking the various .data and .text segments …\nhandles parsing and lexing the program listing\nhandles converting the abstract program representation to …\nPrint a binary (u32) buffer to a file specified in filename\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nlinks all identifiers in the program together, converting …\nLocation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nparse a program listing, creating an abstract program tree …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreceives an abstract program tree, handles converting it …\nconvert the binary to intel HEX format for uploading to …")