var searchIndex = new Map(JSON.parse('[["greg",{"t":"PPPPGPGPPPPPSPFPPPGPFPPPEPPPPPEPPFFPPPPPPPSPGPPOOHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNCCOOCCOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHGPPNNNNNNNHNNNNPPPPPFPGNNNNONNNNNNNNNCHONNNNNNNIFNNNNNNNNNNNNNHH","n":["Add","Addi","Addr","And","AssemblerError","Beq","Bl","Block","Bne","Cmp","Colon","Comma","DATA_ADDRESS_OFFSET","Data","DataNode","Err","Identifier","Immediate","Instr","Instruction","InstructionNode","J","Ja","La","LinkerError","","Lui","Lw","Not","Or","ParserError","","Pop","ProgramBinary","ProgramTree","Push","Register","Sl","Space","Sr","Sub","Sw","TEXT_ADDRESS_OFFSET","Text","Token","Word","Xor","address","","assemble","block","borrow","","","","","","","","borrow_mut","","","","","","","","clone","","","","","","","clone_into","","","","","","","clone_to_uninit","","","","","","","data","","","eq","","","","","","","","fmt","","","","","","","","","from","","","","","","","","identifier","","imm","imm_identifier","instructions","","into","","","","","","","","io","linker","num","op","parser","printer","ra","rb","rd","to_owned","","","","","","","to_string","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","print_to_file","LinkerError","RedefinedIdentifier","UnknownIdentifier","borrow","borrow_mut","eq","fmt","","from","into","link","to_string","try_from","try_into","type_id","CodeOutsideSegment","Empty","End","Incomplete","InvalidToken","Loc","NegativeSpace","ParserError","borrow","","borrow_mut","","col","eq","","fmt","","","from","","into","","mylexer","parse","row","to_string","try_from","","try_into","","type_id","","Lexer","Lexer_","borrow","borrow_mut","from","into","into_iter","new","new_from_iter","new_from_iter_with_state","new_with_state","next","try_from","try_into","type_id","print_binary","print_hex"],"q":[[0,"greg"],[171,"greg::io"],[172,"greg::linker"],[187,"greg::parser"],[219,"greg::parser::mylexer"],[234,"greg::printer"],[236,"alloc::string"],[237,"core::result"],[238,"greg::types"],[239,"core::fmt"],[240,"core::any"],[241,"core::str::iter"],[242,"core::default"],[243,"core::iter::traits::iterator"],[244,"core::clone"],[245,"core::option"]],"i":"Ad0Ab1`1`A`2200`1`000`0`222`j3333`03``3132333`2`23AfAh`034510AjAl456732104567321056732105673210210567321045673210445673210432331056732104``23``33356732104567321045673210456732104``Bh00000000`0000Bl0000`0`Bj1010010110101``01010101``C`000000000000``","f":"`````````````````````````````````````````````````{{{d{b}}f}{{l{hj}}}}`{d{{d{c}}}{}}0000000{{{d{n}}}{{d{nc}}}{}}0000000{{{d{A`}}}A`}{{{d{Ab}}}Ab}{{{d{Ad}}}Ad}{{{d{Af}}}Af}{{{d{Ah}}}Ah}{{{d{Aj}}}Aj}{{{d{Al}}}Al}{{d{d{nc}}}An{}}000000{dAn}000000```{{{d{A`}}{d{A`}}}B`}{{{d{Ab}}{d{Ab}}}B`}{{{d{Ad}}{d{Ad}}}B`}{{{d{Af}}{d{Af}}}B`}{{{d{Ah}}{d{Ah}}}B`}{{{d{Aj}}{d{Aj}}}B`}{{{d{Al}}{d{Al}}}B`}{{{d{j}}{d{j}}}B`}{{{d{A`}}{d{nBb}}}Bd}{{{d{Ab}}{d{nBb}}}Bd}{{{d{Ad}}{d{nBb}}}Bd}{{{d{Af}}{d{nBb}}}Bd}{{{d{Ah}}{d{nBb}}}Bd}{{{d{Aj}}{d{nBb}}}Bd}{{{d{Al}}{d{nBb}}}Bd}{{{d{j}}{d{nBb}}}Bd}0{cc{}}0000000``````{{}c{}}0000000`````````{dc{}}000000{dh}{c{{l{e}}}{}{}}0000000{{}{{l{c}}}{}}0000000{dBf}0000000{{{d{b}}h}An}```{d{{d{c}}}{}}{{{d{n}}}{{d{nc}}}{}}{{{d{Bh}}{d{Bh}}}B`}{{{d{Bh}}{d{nBb}}}Bd}0;:{Aj{{l{AjBh}}}}9876````````4433`{{{d{Bj}}{d{Bj}}}B`}{{{d{Bl}}{d{Bl}}}B`}{{{d{Bj}}{d{nBb}}}Bd}{{{d{Bl}}{d{nBb}}}Bd}0{cc{}}0{{}c{}}0`{{{d{b}}}{{l{AjBl}}}}`{dh}{c{{l{e}}}{}{}}0{{}{{l{c}}}{}}0{dBf}0``?>655{{{d{b}}}{{C`{Bnc}}}Cb}{c{{C`{ce}}}{{Ch{}{{Cd{Cf}}}}Cj}Cb}{{cAn}{{C`{cAn}}}{{Ch{}{{Cd{Cf}}}}Cj}}{{{d{b}}An}{{C`{BnAn}}}}{{{d{n{C`{cAn}}}}}{{Cl{e}}}{{Ch{}{{Cd{Cf}}}}Cj}{}}765{AjAl}{{Alf}h}","D":"Eh","p":[[1,"str"],[1,"reference"],[1,"u32"],[5,"String",236],[6,"AssemblerError",0],[6,"Result",237],[0,"mut"],[6,"Token",0,238],[6,"Bl",0,238],[6,"Instr",0,238],[5,"InstructionNode",0,238],[5,"DataNode",0,238],[5,"ProgramTree",0,238],[5,"ProgramBinary",0,238],[1,"unit"],[1,"bool"],[5,"Formatter",239],[8,"Result",239],[5,"TypeId",240],[6,"LinkerError",172],[5,"Loc",187],[6,"ParserError",187],[5,"Chars",241],[5,"Lexer_",219],[10,"Default",242],[17,"Item"],[1,"char"],[10,"Iterator",243],[10,"Clone",244],[6,"Option",245]],"r":[[6,238],[14,238],[18,238],[20,238],[24,172],[30,187],[33,238],[34,238],[44,238]],"b":[[106,"impl-Display-for-AssemblerError"],[107,"impl-Debug-for-AssemblerError"],[178,"impl-Debug-for-LinkerError"],[179,"impl-Display-for-LinkerError"],[203,"impl-Debug-for-ParserError"],[204,"impl-Display-for-ParserError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAMAAEwAAAAYACAAEAA4AAAAQAAIAFAAAABYACwAkAAYALAAAAC4AAwAzADkAdQAFAIUAAQCJACIArQAHALgACADCAAsA0gAAANQACwDiAAgA"}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[4614]}